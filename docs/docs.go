// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/gateway-admin/api/create": {
            "post": {
                "description": "创建API的接口",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "请求body",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateAPIParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler._StdResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.CreateAPIParams": {
            "type": "object",
            "required": [
                "api_name",
                "method",
                "pattern",
                "target_mode"
            ],
            "properties": {
                "api_name": {
                    "description": "API名字",
                    "type": "string"
                },
                "auth": {
                    "description": "鉴权类型",
                    "type": "string"
                },
                "description": {
                    "description": "描述",
                    "type": "string"
                },
                "ip_black_list": {
                    "description": "IP黑名单",
                    "type": "string"
                },
                "ip_white_list": {
                    "description": "IP白名单",
                    "type": "string"
                },
                "max_qps": {
                    "description": "限流，最大QPS",
                    "type": "integer"
                },
                "method": {
                    "description": "Method",
                    "type": "string"
                },
                "pattern": {
                    "description": "Pattern",
                    "type": "string"
                },
                "target_lb": {
                    "description": "负载均衡类型",
                    "type": "string"
                },
                "target_mode": {
                    "description": "API转发模式",
                    "type": "integer"
                },
                "target_service_name": {
                    "description": "目标服务名",
                    "type": "string"
                },
                "target_strip_prefix": {
                    "description": "是否去掉Pattern前缀",
                    "type": "integer"
                },
                "target_timeout": {
                    "description": "目标服务超市时间",
                    "type": "integer"
                },
                "target_url": {
                    "description": "目标URL",
                    "type": "string"
                }
            }
        },
        "handler._StdResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "prompts": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
